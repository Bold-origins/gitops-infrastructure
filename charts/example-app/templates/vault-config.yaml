{{- if .Values.vault.enabled -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "example-app.fullname" . }}-vault-config
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "example-app.labels" . | nindent 4 }}
  annotations:
    vault.hashicorp.com/agent-inject: "true"
    vault.hashicorp.com/role: {{ .Values.vault.role | default "example-app" | quote }}
    {{- if .Values.vault.secretPath }}
    vault.hashicorp.com/agent-inject-secret-{{ .Values.vault.secretFileName | default "database-config.txt" }}: {{ .Values.vault.secretPath | quote }}
    {{- end }}
    {{- if .Values.vault.secretTemplate }}
    vault.hashicorp.com/agent-inject-template-{{ .Values.vault.secretFileName | default "database-config.txt" }}: {{ .Values.vault.secretTemplate | quote }}
    {{- else }}
    vault.hashicorp.com/agent-inject-template-{{ .Values.vault.secretFileName | default "database-config.txt" }}: |
      {{`{{- with secret "{{ .Values.vault.secretPath | default "secret/data/example-app/database" }}" -}}
      export DB_USERNAME="{{ .Data.data.username }}"
      export DB_PASSWORD="{{ .Data.data.password }}"
      {{- end -}}`}}
    {{- end }}
data:
  # This ConfigMap doesn't need actual data as it's used primarily for annotations
  # The Vault Agent Injector will create files based on the annotations
  vault-usage-example: |
    This ConfigMap demonstrates how to use Vault with the application.
    The Vault Agent Injector will create files in the pod based on the annotations.
    These files will contain the secrets from Vault.
{{- end }} 