# GitOps Implementation & Validation Plan

## Current Status Summary

- Setup script has completed, but with several issues
- Namespaces for components are created but no resources are deployed
- Flux controllers are running but GitRepository resource is missing
- Verification script reports cert-manager and sealed-secrets as running, which appears to be incorrect

## Script Analysis Findings

1. **Flux GitOps Configuration Issue**

   - The setup-flux.sh script appears to run the bootstrap command correctly:
     ```bash
     flux bootstrap github \
         --owner="${GITHUB_USER}" \
         --repository="${GITHUB_REPO}" \
         --branch=main \
         --path=clusters/local \
         --personal \
         --token-auth \
         --token="${GITHUB_TOKEN}"
     ```
   - However, the GitRepository resource isn't being created
   - Possible causes:
     - GitHub credentials not properly loaded from .env
     - Repository path/name mismatch: using k3s-infrastructure vs gitops-infrastructure
     - Path in the bootstrap command may be incorrect (clusters/local)

2. **Component Deployment Mechanism**

   - setup-core-infrastructure.sh uses kubectl to apply kustomizations:
     ```bash
     kubectl apply -k "clusters/local/infrastructure/${component}"
     ```
   - Kustomization files reference base configurations:
     ```yaml
     resources:
     - ../../../base/infrastructure/cert-manager
     ```
   - Base configurations use a combination of CRDs, HelmReleases, and direct resources

3. **Verification Script Logic Issue**

   - verify-environment.sh has incorrect logic in the check_component function
   - It checks namespace existence but doesn't properly verify pod status

## Additional Findings

During testing, we discovered that the GitHub credentials are missing from the .env file:

```bash
# Missing from .env file:
GITHUB_USER=Bold-origins
GITHUB_REPO=gitops-infrastructure
GITHUB_TOKEN=your-github-token
```

This is why the GitRepository resource isn't being created properly. Our fix to the setup-flux.sh script includes fallback mechanisms, but it still requires the GitHub credentials to be set.

### Solutions:

1. **Update .env File**:
   - Add the required GitHub credentials to the .env file
   - These should match your actual GitHub repository information

2. **Document Requirements**:
   - Update setup documentation to clearly indicate the required environment variables
   - Include examples of the expected values

### Updated .env Template

We should update the .env template to include these required values:

```bash
# GitHub credentials for Flux GitOps
GITHUB_USER=your-github-username
GITHUB_REPO=your-repository-name
GITHUB_TOKEN=your-personal-access-token
```

## Fix Action Plan

### 1. Fix Flux GitOps Setup

1. Modify setup-flux.sh to explicitly create GitRepository if bootstrap fails:
   ```bash
   # After bootstrap attempt, check if GitRepository exists
   if ! kubectl get gitrepository -n flux-system flux-system &>/dev/null; then
       echo "GitRepository not found. Creating manually..."
       flux create source git flux-system \
         --url=https://github.com/${GITHUB_USER}/${GITHUB_REPO} \
         --branch=main \
         --username=${GITHUB_USER} \
         --password=${GITHUB_TOKEN} \
         --namespace=flux-system
   fi
   ```

2. Ensure environment variables are correctly loaded and used:
   - Print the values of GITHUB_USER, GITHUB_REPO, GITHUB_TOKEN (securely) for debugging
   - Verify that the values match what's in the .env file

3. Fix the flux-kustomization.yaml path:
   - The current path is `./clusters/local/infrastructure/ingress`
   - Consider changing to a more general path like `./clusters/local/infrastructure`

### 2. Fix Component Deployment

1. Check base configurations for correctness:
   - Verify HelmRelease CRDs are installed
   - Ensure paths in kustomization files are correct
   - Check for any Flux-specific CRDs or resources that might be missing

2. Add dependency management to scripts:
   - Ensure components are deployed in the correct order
   - Add additional wait conditions between component installations

### 3. Fix Verification Script

1. Update check_component function to properly verify pods:
   ```bash
   check_component() {
       component=$1
       namespace=$2
       label_selector=${3:-""}
       
       echo "Checking ${component} in namespace ${namespace}..."
       
       # Check if namespace exists
       if ! kubectl get namespace "${namespace}" &>/dev/null; then
           echo "  ❌ Namespace ${namespace} does not exist."
           return 1
       fi
       
       # Check if pods exist and are running
       if [ -n "${label_selector}" ]; then
           if [ $(kubectl get pods -n "${namespace}" -l "${label_selector}" --no-headers 2>/dev/null | wc -l) -eq 0 ]; then
               echo "  ❌ No pods found for ${component} with selector ${label_selector}."
               return 1
           fi
           
           # Check if all pods are running or completed
           if [ $(kubectl get pods -n "${namespace}" -l "${label_selector}" --no-headers 2>/dev/null | grep -v "Running\|Completed" | wc -l) -ne 0 ]; then
               echo "  ⚠️ Some pods for ${component} are not in Running or Completed state."
               return 2
           fi
       else
           if [ $(kubectl get pods -n "${namespace}" --no-headers 2>/dev/null | wc -l) -eq 0 ]; then
               echo "  ❌ No pods found in namespace ${namespace}."
               return 1
           fi
           
           # Check if all pods are running or completed
           if [ $(kubectl get pods -n "${namespace}" --no-headers 2>/dev/null | grep -v "Running\|Completed" | wc -l) -ne 0 ]; then
               echo "  ⚠️ Some pods in namespace ${namespace} are not in Running or Completed state."
               return 2
           fi
       fi
       
       echo "  ✅ ${component} is running correctly."
       return 0
   }
   ```

## Testing Workflow

1. Reset the environment:
   ```bash
   minikube delete
   export MINIKUBE_MEMORY=6144 && export MINIKUBE_CPUS=4
   minikube start --memory=6144 --cpus=4
   ```

2. Apply fixes to scripts

3. Run setup script again:
   ```bash
   ./scripts/cluster/setup-all.sh
   ```

4. Verify components and functionality:
   ```bash
   ./scripts/cluster/verify-environment.sh
   kubectl get pods -A
   ```

## Phase Completion Checklist

- [x] Identified root causes of the issues
- [x] Fixed Flux GitOps setup script
  - [x] Added robust error handling
  - [x] Added fallback mechanism to create GitRepository manually
  - [x] Added debug output for GitHub credentials
- [x] Fixed flux-kustomization.yaml path
  - [x] Changed from specific component path to general infrastructure path
- [x] Fixed verification script
  - [x] Updated check_component function logic
  - [x] Improved pod status checking
- [ ] Test the fixes
  - [ ] Reset the environment
  - [ ] Run the setup script
  - [ ] Verify component deployments
  - [ ] Test component functionality
- [ ] Document the process
  - [ ] Update workflow documentation
  - [ ] Create troubleshooting guide
  - [ ] Document lessons learned

## Next Steps
1. Reset the Minikube environment: `minikube delete && minikube start`
2. Run the setup script with fixes: `./scripts/cluster/setup-all.sh`
3. Verify that all components are deployed correctly
4. Document the experience for future reference

## Lessons Learned
1. GitOps workflow requires proper GitRepository configuration
2. Verification scripts need robust logic to avoid false positives
3. Kustomization paths should be general enough to include all necessary components
4. Script dependencies need to be carefully managed
5. Error handling is essential for automated workflows

## Issues Identified

1. **Flux GitOps Configuration Issue**

   - Flux controllers are running but GitRepository resource is missing
   - This prevents Flux from syncing with the repository and deploying components
   - Need to check setup-flux.sh to ensure it properly creates the GitRepository resource

2. **Component Deployment Issues**

   - Namespaces exist but no pods or deployments in:
     - cert-manager
     - metallb-system
     - observability
     - supabase
   - This suggests components are not being properly deployed by scripts

3. **Verification Script Issues**
   - Reports cert-manager and sealed-secrets as running when no pods exist
   - May be due to incorrect check logic in verify-environment.sh
   - Function check_component() has a logic issue

## Next Steps

1. **Fix Flux GitOps Configuration**:

   - Examine setup-flux.sh to identify why GitRepository isn't being created
   - Fix the script to properly create and configure GitRepository
   - Test the fix by running setup-flux.sh again

2. **Fix Component Deployment Scripts**:

   - Check setup-core-infrastructure.sh, setup-networking.sh, etc. to identify issues
   - Ensure they properly apply the Kubernetes manifests
   - Test fixes by running each script individually

3. **Fix Verification Script**:

   - Update verify-environment.sh to correctly check component health
   - Ensure check_component() function properly validates component existence
   - Test the fixed verification script

4. **Test Complete Workflow**:
   - Run setup-all.sh with fixes in place
   - Verify all components deploy correctly
   - Document the process for future reference

## Testing Workflow

1. Reset environment: `minikube delete && minikube start`
2. Run fixed setup-all.sh script
3. Verify components with fixed verify-environment.sh
4. Test functional access to services (Grafana, Prometheus, etc.)

## Documentation to Update

- Document script issues and fixes
- Create troubleshooting guide for common issues
- Update workflow documentation for local development

## Phase 1: Test and Validate the Scripts

- [x] Run the setup-all.sh script
- [x] Check for any errors or issues in the setup process
- [ ] Identify specific script failures:
  - [ ] Missing Vault deployment
  - [ ] Flux GitRepository issue
- [ ] Document the issues for script improvements

## Phase 2: Debug and Fix the Scripts

- [ ] Examine the setup-flux.sh script to ensure it properly configures Flux with the correct repository
- [ ] Check the core-infrastructure.sh script to fix Vault deployment
- [ ] Ensure all dependencies are properly set up in the correct order
- [ ] Test fixes by re-running the scripts individually

## Phase 3: Validate Components Deployed by the Scripts

- [ ] Run the verification script again after fixes
- [ ] Test core functionality of the deployed components
- [ ] Document any remaining issues

## Phase 4: Prepare for Staging Environment

- [ ] Document the successful local deployment workflow
- [ ] Note any changes needed for staging scripts
- [ ] Prepare staging directory structure and scripts
- [ ] Update CI/CD pipeline for staging

## Daily Testing Checklist

- [ ] Run `scripts/cluster/verify-environment.sh` to check component health
- [ ] Check all namespaces and pods: `kubectl get pods -A`
- [ ] Verify application endpoints are accessible
- [ ] Check observability dashboards

## Current Issues Identified

- Flux is partially set up (controllers running) but missing GitRepository configuration
  - This suggests that the setup-flux.sh script has an issue with configuring the Git repository source
- Vault failed to deploy
  - Need to check the setup-core-infrastructure.sh script for Vault deployment issues
- Some namespaces exist but no pods are running
  - Indicates that the deployment process didn't complete properly

## Next Steps

1. Run the verification script to get a complete picture of what's working and what's not
2. Document specific issues found in the scripts
3. Fix the scripts to ensure proper deployment
4. Test the fixed workflow to ensure everything deploys correctly

## Enhancements Made

In addition to fixing the GitOps workflow issues, we've implemented the following enhancements to improve the developer experience:

### 1. Enhanced Setup Workflow

Created a new streamlined setup workflow in the `scripts/setup` directory:

- **init-environment.sh**: A comprehensive script that:
  - Loads and verifies environment variables from `.env`
  - Manages Minikube cluster creation and configuration
  - Sets up proper resources (memory, CPUs, disk space)
  - Enables required addons
  - Verifies kubectl context

This enhancement makes the local development setup more consistent and eliminates the need to remember specific commands or parameters.

### 2. Complete Workflow Documentation

Added documentation for the new setup workflow:

- Created `scripts/setup/README.md` with detailed instructions
- Documented common issues and solutions
- Provided a clear step-by-step workflow

### 3. Fixed Scripts

Fixed critical issues in the existing scripts:

- `setup-flux.sh`: Added robust error handling and fallback mechanism
- `flux-kustomization.yaml`: Fixed path to include all infrastructure components
- `verify-environment.sh`: Improved component health checking logic

## Recommended Workflow

With these improvements, the recommended workflow for local development is:

1. **Initialize Environment**:
   ```bash
   ./scripts/setup/init-environment.sh
   ```

2. **Deploy All Components**:
   ```bash
   ./scripts/cluster/setup-all.sh
   ```

3. **Verify Environment**:
   ```bash
   ./scripts/cluster/verify-environment.sh
   ```

This workflow ensures a consistent and reliable local development environment.
