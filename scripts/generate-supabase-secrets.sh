#!/bin/bash
set -e

# Create directory for secrets
SECRETS_DIR="clusters/local/infrastructure/supabase/secrets"
mkdir -p $SECRETS_DIR

# Generate JWT secret (32 characters)
JWT_SECRET=$(openssl rand -base64 32)

# Generate database password
DB_PASSWORD=$(openssl rand -base64 16)

# Generate encoded database password (double base64 encoded as some Supabase components expect this format)
DB_PASSWORD_ENCODED=$(echo -n "$DB_PASSWORD" | base64 | base64)

# Generate JWT tokens using the secret
# These are example tokens that would normally be generated by Supabase
# The payload contains role, issuer, issued-at time, and expiry time
ANON_KEY=$(echo -n "{\"role\":\"anon\",\"iss\":\"supabase-demo\",\"iat\":1641769200,\"exp\":1799535600}" | openssl dgst -sha256 -hmac "$JWT_SECRET" -binary | base64 | tr '/+' '_-' | tr -d '=')
SERVICE_KEY=$(echo -n "{\"role\":\"service_role\",\"iss\":\"supabase-demo\",\"iat\":1641769200,\"exp\":1799535600}" | openssl dgst -sha256 -hmac "$JWT_SECRET" -binary | base64 | tr '/+' '_-' | tr -d '=')

# Create JWT secret file
cat > $SECRETS_DIR/jwt-secret.yaml << EOF
apiVersion: v1
kind: Secret
metadata:
  name: supabase-jwt
  namespace: supabase
type: Opaque
stringData:
  anonKey: $ANON_KEY
  serviceKey: $SERVICE_KEY
  jwtSecret: $JWT_SECRET
  secret: $JWT_SECRET
EOF

# Create database secret file
cat > $SECRETS_DIR/db-secret.yaml << EOF
apiVersion: v1
kind: Secret
metadata:
  name: supabase-db
  namespace: supabase
type: Opaque
stringData:
  username: postgres
  password: $DB_PASSWORD
  database: postgres
  password_encoded: $DB_PASSWORD_ENCODED
EOF

# Create dashboard admin secret
cat > $SECRETS_DIR/dashboard-secret.yaml << EOF
apiVersion: v1
kind: Secret
metadata:
  name: supabase-dashboard
  namespace: supabase
type: Opaque
stringData:
  username: admin
  password: $(openssl rand -base64 12)
EOF

# Create SMTP secret
cat > $SECRETS_DIR/smtp-secret.yaml << EOF
apiVersion: v1
kind: Secret
metadata:
  name: supabase-smtp
  namespace: supabase
type: Opaque
stringData:
  username: your-mail@example.com
  password: $(openssl rand -base64 12)
EOF

# Create analytics secret
cat > $SECRETS_DIR/analytics-secret.yaml << EOF
apiVersion: v1
kind: Secret
metadata:
  name: supabase-analytics
  namespace: supabase
type: Opaque
stringData:
  apiKey: $(openssl rand -base64 24)
EOF

# Create S3 secret
cat > $SECRETS_DIR/s3-secret.yaml << EOF
apiVersion: v1
kind: Secret
metadata:
  name: supabase-s3
  namespace: supabase
type: Opaque
stringData:
  keyId: $(openssl rand -hex 8)
  accessKey: $(openssl rand -base64 24)
EOF

echo "Supabase secrets generated in $SECRETS_DIR"
echo "To seal these secrets for GitOps, run:"
echo "  kubeseal -f $SECRETS_DIR/jwt-secret.yaml -w clusters/local/infrastructure/supabase/sealed-secrets/sealed-jwt-secret.yaml"
echo "  kubeseal -f $SECRETS_DIR/db-secret.yaml -w clusters/local/infrastructure/supabase/sealed-secrets/sealed-db-secret.yaml"
echo "  kubeseal -f $SECRETS_DIR/dashboard-secret.yaml -w clusters/local/infrastructure/supabase/sealed-secrets/sealed-dashboard-secret.yaml"
echo "  kubeseal -f $SECRETS_DIR/smtp-secret.yaml -w clusters/local/infrastructure/supabase/sealed-secrets/sealed-smtp-secret.yaml"
echo "  kubeseal -f $SECRETS_DIR/analytics-secret.yaml -w clusters/local/infrastructure/supabase/sealed-secrets/sealed-analytics-secret.yaml"
echo "  kubeseal -f $SECRETS_DIR/s3-secret.yaml -w clusters/local/infrastructure/supabase/sealed-secrets/sealed-s3-secret.yaml" 