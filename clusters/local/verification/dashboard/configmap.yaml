apiVersion: v1
kind: ConfigMap
metadata:
  name: status-dashboard
  namespace: verification
  labels:
    app.kubernetes.io/part-of: gitops-verification
    app.kubernetes.io/managed-by: flux
data:
  index.html: |
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>GitOps Cluster Status Dashboard</title>
      <meta http-equiv="refresh" content="30">
      <style>
        body {
          font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
          margin: 0;
          padding: 20px;
          background-color: #f5f7f9;
          color: #333;
        }
        .container {
          max-width: 1200px;
          margin: 0 auto;
        }
        header {
          background-color: #fff;
          padding: 20px;
          border-radius: 8px;
          box-shadow: 0 2px 4px rgba(0,0,0,0.1);
          margin-bottom: 20px;
        }
        h1 {
          margin: 0;
          color: #2c3e50;
          font-size: 24px;
        }
        .refresh-info {
          color: #7f8c8d;
          font-size: 14px;
          margin-top: 5px;
        }
        .section {
          background-color: #fff;
          border-radius: 8px;
          box-shadow: 0 2px 4px rgba(0,0,0,0.1);
          margin-bottom: 20px;
          overflow: hidden;
        }
        .section-header {
          background-color: #f8f9fa;
          padding: 15px 20px;
          border-bottom: 1px solid #eee;
        }
        .section-title {
          margin: 0;
          color: #2c3e50;
          font-size: 18px;
        }
        .components {
          padding: 0;
        }
        .component {
          padding: 15px 20px;
          border-bottom: 1px solid #eee;
          display: flex;
          align-items: center;
          transition: background-color 0.2s;
        }
        .component:last-child {
          border-bottom: none;
        }
        .component:hover {
          background-color: #f8f9fa;
        }
        .component-name {
          flex: 1;
          font-weight: 500;
        }
        .component-status {
          padding: 5px 10px;
          border-radius: 4px;
          font-weight: 500;
          font-size: 14px;
        }
        .healthy {
          background-color: #d4edda;
          color: #155724;
        }
        .unhealthy {
          background-color: #f8d7da;
          color: #721c24;
        }
        .unknown {
          background-color: #e2e3e5;
          color: #383d41;
        }
        .timestamp {
          font-size: 12px;
          color: #6c757d;
          margin-left: 10px;
        }
        footer {
          text-align: center;
          margin-top: 30px;
          color: #7f8c8d;
          font-size: 14px;
        }
        .description {
          padding: 0 20px 15px;
          color: #6c757d;
        }
        @media (max-width: 768px) {
          .component {
            flex-direction: column;
            align-items: flex-start;
          }
          .component-status {
            margin-top: 5px;
          }
        }
      </style>
    </head>
    <body>
      <div class="container">
        <header>
          <h1>GitOps Cluster Status Dashboard</h1>
          <p class="refresh-info">Auto-refreshes every 30 seconds. Last updated: <span id="update-time"></span></p>
        </header>
        
        <div class="section">
          <div class="section-header">
            <h2 class="section-title">Infrastructure Components</h2>
          </div>
          <p class="description">Core infrastructure components that provide fundamental capabilities to the cluster.</p>
          <div class="components" id="infrastructure-components">
            <!-- Components will be populated by JavaScript -->
            <div class="component">
              <span class="component-name">Loading infrastructure components...</span>
              <span class="component-status unknown">Unknown</span>
            </div>
          </div>
        </div>
        
        <div class="section">
          <div class="section-header">
            <h2 class="section-title">Application Components</h2>
          </div>
          <p class="description">Application workloads running on the cluster.</p>
          <div class="components" id="application-components">
            <!-- Components will be populated by JavaScript -->
            <div class="component">
              <span class="component-name">Loading application components...</span>
              <span class="component-status unknown">Unknown</span>
            </div>
          </div>
        </div>
        
        <div class="section">
          <div class="section-header">
            <h2 class="section-title">GitOps System</h2>
          </div>
          <p class="description">Status of the GitOps controllers and reconciliation processes.</p>
          <div class="components" id="gitops-components">
            <!-- Components will be populated by JavaScript -->
            <div class="component">
              <span class="component-name">Loading GitOps components...</span>
              <span class="component-status unknown">Unknown</span>
            </div>
          </div>
        </div>
        
        <footer>
          <p>Powered by Flux GitOps | Data is fetched from Kubernetes ConfigMaps</p>
        </footer>
      </div>

      <script>
        // In a real implementation, this would fetch from an API service that reads the ConfigMaps
        // For this example, we'll use mock data that would be replaced by real API calls
        
        document.getElementById('update-time').textContent = new Date().toLocaleString();
        
        // Mock infrastructure components (in production this would be fetched from the API)
        const infrastructureComponents = [
          { name: 'cert-manager', status: 'healthy', timestamp: '2025-03-07T14:15:00Z' },
          { name: 'sealed-secrets', status: 'healthy', timestamp: '2025-03-07T14:15:00Z' },
          { name: 'vault', status: 'healthy', timestamp: '2025-03-07T14:15:00Z' },
          { name: 'gatekeeper', status: 'healthy', timestamp: '2025-03-07T14:15:00Z' },
          { name: 'minio', status: 'healthy', timestamp: '2025-03-07T14:15:00Z' },
          { name: 'ingress-nginx', status: 'healthy', timestamp: '2025-03-07T14:15:00Z' },
          { name: 'metallb', status: 'healthy', timestamp: '2025-03-07T14:15:00Z' }
        ];
        
        // Mock application components
        const applicationComponents = [
          { name: 'supabase', status: 'healthy', timestamp: '2025-03-07T14:15:00Z' },
          { name: 'supabase-helmrelease', status: 'healthy', timestamp: '2025-03-07T14:15:00Z' }
        ];
        
        // Mock GitOps components
        const gitopsComponents = [
          { name: 'flux-controllers', status: 'healthy', timestamp: '2025-03-07T14:15:00Z' },
          { name: 'flux-source-controller', status: 'healthy', timestamp: '2025-03-07T14:15:00Z' },
          { name: 'flux-kustomize-controller', status: 'healthy', timestamp: '2025-03-07T14:15:00Z' },
          { name: 'flux-helm-controller', status: 'healthy', timestamp: '2025-03-07T14:15:00Z' }
        ];
        
        // Function to render components
        function renderComponents(components, containerId) {
          const container = document.getElementById(containerId);
          container.innerHTML = '';
          
          components.forEach(component => {
            const componentEl = document.createElement('div');
            componentEl.className = 'component';
            
            const nameEl = document.createElement('span');
            nameEl.className = 'component-name';
            nameEl.textContent = component.name.charAt(0).toUpperCase() + component.name.slice(1);
            
            const statusEl = document.createElement('span');
            statusEl.className = `component-status ${component.status}`;
            statusEl.textContent = component.status.charAt(0).toUpperCase() + component.status.slice(1);
            
            const timestampEl = document.createElement('span');
            timestampEl.className = 'timestamp';
            const date = new Date(component.timestamp);
            timestampEl.textContent = date.toLocaleTimeString();
            
            componentEl.appendChild(nameEl);
            componentEl.appendChild(statusEl);
            componentEl.appendChild(timestampEl);
            
            container.appendChild(componentEl);
          });
        }
        
        // Render all components
        renderComponents(infrastructureComponents, 'infrastructure-components');
        renderComponents(applicationComponents, 'application-components');
        renderComponents(gitopsComponents, 'gitops-components');
        
        // In a real implementation, you would add fetch code to get the real data from the API
        // For example:
        /*
        async function fetchComponentStatus() {
          try {
            const response = await fetch('/api/components');
            const data = await response.json();
            
            renderComponents(data.infrastructure, 'infrastructure-components');
            renderComponents(data.applications, 'application-components');
            renderComponents(data.gitops, 'gitops-components');
            
            document.getElementById('update-time').textContent = new Date().toLocaleString();
          } catch (error) {
            console.error('Error fetching component status:', error);
          }
        }
        
        // Initial fetch
        fetchComponentStatus();
        
        // Set up interval for refreshing data (in addition to page refresh)
        setInterval(fetchComponentStatus, 30000);
        */
      </script>
    </body>
    </html>
