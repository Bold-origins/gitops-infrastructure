apiVersion: batch/v1
kind: CronJob
metadata:
  name: infrastructure-verification
  namespace: verification
  labels:
    app.kubernetes.io/part-of: gitops-verification
    app.kubernetes.io/managed-by: flux
spec:
  schedule: "*/15 * * * *"  # Run every 15 minutes
  concurrencyPolicy: Replace
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app.kubernetes.io/part-of: gitops-verification
        spec:
          serviceAccountName: verification-sa
          containers:
          - name: verify
            image: bitnami/kubectl:latest
            command:
            - /bin/bash
            - -c
            - |
              echo "Starting infrastructure verification checks..."
              
              # Check cert-manager
              echo "Checking cert-manager..."
              if kubectl wait --for=condition=Ready --timeout=30s -n cert-manager pods -l app.kubernetes.io/instance=cert-manager > /dev/null 2>&1; then
                echo "cert-manager is healthy"
                kubectl create configmap cert-manager-status --from-literal=status=healthy --from-literal=timestamp="$(date -u +"%Y-%m-%dT%H:%M:%SZ")" -o yaml --dry-run=client | kubectl apply -f -
              else
                echo "cert-manager is unhealthy"
                kubectl create configmap cert-manager-status --from-literal=status=unhealthy --from-literal=timestamp="$(date -u +"%Y-%m-%dT%H:%M:%SZ")" -o yaml --dry-run=client | kubectl apply -f -
              fi
              
              # Check sealed-secrets
              echo "Checking sealed-secrets..."
              if kubectl wait --for=condition=Ready --timeout=30s -n sealed-secrets pods -l app.kubernetes.io/name=sealed-secrets > /dev/null 2>&1; then
                echo "sealed-secrets is healthy"
                kubectl create configmap sealed-secrets-status --from-literal=status=healthy --from-literal=timestamp="$(date -u +"%Y-%m-%dT%H:%M:%SZ")" -o yaml --dry-run=client | kubectl apply -f -
              else
                echo "sealed-secrets is unhealthy"
                kubectl create configmap sealed-secrets-status --from-literal=status=unhealthy --from-literal=timestamp="$(date -u +"%Y-%m-%dT%H:%M:%SZ")" -o yaml --dry-run=client | kubectl apply -f -
              fi
              
              # Check vault
              echo "Checking vault..."
              if kubectl wait --for=condition=Ready --timeout=30s -n vault-system pods -l app.kubernetes.io/instance=vault > /dev/null 2>&1; then
                echo "vault is healthy"
                kubectl create configmap vault-status --from-literal=status=healthy --from-literal=timestamp="$(date -u +"%Y-%m-%dT%H:%M:%SZ")" -o yaml --dry-run=client | kubectl apply -f -
              else
                echo "vault is unhealthy"
                kubectl create configmap vault-status --from-literal=status=unhealthy --from-literal=timestamp="$(date -u +"%Y-%m-%dT%H:%M:%SZ")" -o yaml --dry-run=client | kubectl apply -f -
              fi
              
              # Check gatekeeper
              echo "Checking gatekeeper..."
              if kubectl wait --for=condition=Ready --timeout=30s -n gatekeeper-system pods -l control-plane=controller-manager > /dev/null 2>&1; then
                echo "gatekeeper is healthy"
                kubectl create configmap gatekeeper-status --from-literal=status=healthy --from-literal=timestamp="$(date -u +"%Y-%m-%dT%H:%M:%SZ")" -o yaml --dry-run=client | kubectl apply -f -
              else
                echo "gatekeeper is unhealthy"
                kubectl create configmap gatekeeper-status --from-literal=status=unhealthy --from-literal=timestamp="$(date -u +"%Y-%m-%dT%H:%M:%SZ")" -o yaml --dry-run=client | kubectl apply -f -
              fi
              
              # Check minio
              echo "Checking minio..."
              if kubectl wait --for=condition=Ready --timeout=30s -n minio-system pods -l app=minio > /dev/null 2>&1; then
                echo "minio is healthy"
                kubectl create configmap minio-status --from-literal=status=healthy --from-literal=timestamp="$(date -u +"%Y-%m-%dT%H:%M:%SZ")" -o yaml --dry-run=client | kubectl apply -f -
              else
                echo "minio is unhealthy"
                kubectl create configmap minio-status --from-literal=status=unhealthy --from-literal=timestamp="$(date -u +"%Y-%m-%dT%H:%M:%SZ")" -o yaml --dry-run=client | kubectl apply -f -
              fi
              
              # Check ingress-nginx
              echo "Checking ingress-nginx..."
              if kubectl wait --for=condition=Ready --timeout=30s -n ingress-system pods -l app.kubernetes.io/name=ingress-nginx > /dev/null 2>&1; then
                echo "ingress-nginx is healthy"
                kubectl create configmap ingress-nginx-status --from-literal=status=healthy --from-literal=timestamp="$(date -u +"%Y-%m-%dT%H:%M:%SZ")" -o yaml --dry-run=client | kubectl apply -f -
              else
                echo "ingress-nginx is unhealthy"
                kubectl create configmap ingress-nginx-status --from-literal=status=unhealthy --from-literal=timestamp="$(date -u +"%Y-%m-%dT%H:%M:%SZ")" -o yaml --dry-run=client | kubectl apply -f -
              fi
              
              # Check metallb
              echo "Checking metallb..."
              if kubectl wait --for=condition=Ready --timeout=30s -n metallb-system pods -l app.kubernetes.io/name=metallb > /dev/null 2>&1; then
                echo "metallb is healthy"
                kubectl create configmap metallb-status --from-literal=status=healthy --from-literal=timestamp="$(date -u +"%Y-%m-%dT%H:%M:%SZ")" -o yaml --dry-run=client | kubectl apply -f -
              else
                echo "metallb is unhealthy"
                kubectl create configmap metallb-status --from-literal=status=unhealthy --from-literal=timestamp="$(date -u +"%Y-%m-%dT%H:%M:%SZ")" -o yaml --dry-run=client | kubectl apply -f -
              fi
              
              echo "Infrastructure verification completed."
          restartPolicy: OnFailure
