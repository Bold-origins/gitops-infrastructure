# Values for Example App

# Number of replicas
replicaCount: 1

# Container image
image:
  repository: busybox
  tag: latest
  pullPolicy: IfNotPresent

# Container command and arguments
command:
- /bin/sh
- -c
args:
- |
  # Source the database config from Vault
  if [ -f /vault/secrets/database-config.txt ]; then
    source /vault/secrets/database-config.txt
    echo "Connected to database at $DB_ENDPOINT with user $DB_USERNAME"
  fi
  
  # Use the API key from the sealed secret
  echo "Using API key: $API_KEY"
  
  # Keep the container running
  while true; do
    sleep 30
  done

# Service account configuration
serviceAccount:
  create: true
  name: example-app
  annotations: {}

# Probes configuration
probes:
  readiness:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 10
    command:
    - cat
    - /vault/secrets/database-config.txt
  liveness:
    enabled: true
    initialDelaySeconds: 15
    periodSeconds: 20
    command:
    - cat
    - /vault/secrets/database-config.txt

# Vault integration
vault:
  enabled: true
  role: app-role
  secretPath: kv/data/database/config
  annotations:
    vault.hashicorp.com/agent-inject: "true"
    vault.hashicorp.com/agent-inject-secret-database-config.txt: "kv/data/database/config"
    vault.hashicorp.com/role: "app-role"
    vault.hashicorp.com/agent-inject-template-database-config.txt: |
      {{- with secret "kv/data/database/config" -}}
      export DB_USERNAME="{{ .Data.data.username }}"
      export DB_PASSWORD="{{ .Data.data.password }}"
      export DB_ENDPOINT="{{ .Data.data.endpoint }}"
      {{- end -}}

# Sealed Secrets integration
sealedSecrets:
  enabled: true
  secretName: example-sealed-secret
  # Environment variables from the sealed secret
  env:
  - name: API_KEY
    key: api-key
  - name: API_SECRET
    key: api-secret

# Resource limits and requests
resources:
  requests:
    memory: "64Mi"
    cpu: "100m"
  limits:
    memory: "128Mi"
    cpu: "200m"

# Service configuration
service:
  type: ClusterIP
  port: 80
  targetPort: 8080

# Ingress configuration
ingress:
  enabled: true
  className: nginx
  annotations:
    cert-manager.io/cluster-issuer: selfsigned-cluster-issuer
  hosts:
  - host: example.local
    paths:
    - path: /
      pathType: Prefix
  tls:
  - secretName: example-tls
    hosts:
    - example.local

# Network Policy
networkPolicy:
  enabled: true
  ingressRules:
  - from:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: default
    ports:
    - protocol: TCP
      port: 8080
  egressRules:
  - to:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: vault
    ports:
    - protocol: TCP
      port: 8200 